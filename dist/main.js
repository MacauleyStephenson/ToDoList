(()=>{var t={513:()=>{}},e={};function s(i){var a=e[i];if(void 0!==a)return a.exports;var o=e[i]={exports:{}};return t[i](o,o.exports,s),o.exports}s.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return s.d(e,{a:e}),e},s.d=(t,e)=>{for(var i in e)s.o(e,i)&&!s.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:e[i]})},s.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{"use strict";var t=s(513),e=s.n(t);new class{constructor(t,e){this.view=e,this.model=t,this.view.eventUpdateLists(this.handleUpdateLists),this.view.eventDeleteTask(this.handleDeleteTask),this.view.eventCompleteTask(this.handleCompleteTask),this.view.eventDeleteProject(this.handleDeleteProject),this.view.eventClickToEditTask(this.handleGetEditTask),this.view.getProjects=this.handleProjectsRequest,this.model.eventOnTaskChange(this.onTaskChange),this.onTaskChange(this.model.tasks),this.model.eventOnProjectChange(this.onProjectChange),this.onProjectChange(this.model.projects),this.view.eventToggleNav(),this.view.eventToggleFilter(),this.view.eventCloseModal(),this.view.eventNewProject(),this.view.eventNewTask(),this.view.eventFilter(this.handleFilterTasks),this.view.eventToggleProjects(),this.filter="all"}onTaskChange=t=>this.view.displayTasks(t);onProjectChange=t=>this.view.displayProjects(t);handleProjectsRequest=()=>this.model._projects;handleUpdateLists=(t,e)=>this.model.updateLists(t,e);handleGetEditTask=t=>this.model.getTaskToEdit(t);handleEditTask=t=>this.model.editTask(t);handleDeleteTask=t=>this.model.deleteTask(t);handleCompleteTask=t=>this.model.completeTask(t);handleAddProject=t=>this.model.addProject(t);handleDeleteProject=t=>this.model.deleteProject(t);handleFilterTasks=t=>this.model.filterTaskList(t)}(new class{constructor(){this.tasks=JSON.parse(localStorage.getItem("tasks"))||[],this.projects=JSON.parse(localStorage.getItem("projects"))||[{id:1,name:"uncategorised"}]}get _projects(){return this.projects}getTaskToEdit(t){return this.tasks.filter((e=>e.id===t))}static compare=(t,e)=>t.complete>e.complete?1:t.complete<e.complete?-1:0;filterTaskList(t){let e;if("all"===t)e=this.tasks;else if("today"===t){const t=(new Date).toDateString();e=this.tasks.filter((e=>new Date(e.duedate).toDateString()===t))}else if("upcoming"===t){const t=(new Date).toDateString();e=this.tasks.filter((e=>new Date(e.duedate).toDateString()>t))}else if("overdue"===t){const t=(new Date).toDateString();e=this.tasks.filter((e=>t>new Date(e.duedate).toDateString()&&!e.complete))}else e="High"===t||"Medium"===t||"Low"===t?this.tasks.filter((e=>e.priority===t)):this.tasks.filter((e=>e.project===t));e.sort(this.compare),this.onTaskChange(e)}eventOnTaskChange(t){this.onTaskChange=t}eventOnProjectChange(t){this.onProjectChange=t}commitTaskChange(t){this.onTaskChange(t),localStorage.setItem("tasks",JSON.stringify(t))}commitProjectChange(t){this.onProjectChange(t),localStorage.setItem("projects",JSON.stringify(t))}updateLists(t,e){"task"===e?this.addTask(t):"project"===e?this.addProject(t):"edit"===e&&this.editTask(t)}addTask(t){const e={id:this.tasks.length>0?this.tasks[this.tasks.length-1].id+1:1,task:t.title,description:t.description,duedate:t.date,priority:t.priority,project:t.project,complete:!1};this.tasks.push(e),this.commitTaskChange(this.tasks)}editTask(t){this.tasks=this.tasks.map((e=>e.id===t.id?{id:e.id,task:t.title,description:t.description,duedate:t.date,priority:t.priority,project:t.project,complete:e.complete}:e)),this.commitTaskChange(this.tasks)}deleteTask(t){this.tasks=this.tasks.filter((e=>e.id!==t)),this.commitTaskChange(this.tasks)}completeTask(t){this.tasks=this.tasks.map((e=>e.id===t?{id:e.id,task:e.task,description:e.description,duedate:e.duedate,priority:e.priority,project:e.project,complete:!e.complete}:e)),this.tasks.sort(this.compare),this.commitTaskChange(this.tasks)}addProject(t){const e={id:this.projects.length>0?this.projects[this.projects.length-1].id+1:1,name:t};this.projects.push(e),this.commitProjectChange(this.projects)}deleteProject(t){const[e]=this.projects.filter((e=>e.id===t));this.tasks=this.tasks.map((t=>t.project===e.name?{id:t.id,task:t.task,description:t.description,duedate:t.duedate,priority:t.priority,project:"uncategorised",complete:t.complete}:t)),this.projects=this.projects.filter((e=>e.id!==t)),this.commitTaskChange(this.tasks),this.commitProjectChange(this.projects),this.filterTaskList("all")}},new(e()))})()})();